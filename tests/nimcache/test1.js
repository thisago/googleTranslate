/* Generated by the Nim Compiler v1.4.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI2378044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI6540232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI6795011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI2384408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI2384728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI2378013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI2378015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI2384723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI2384617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI2384621 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI2384643 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI2384643 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI2384643.node = NNI2384643;
var NNI2384621 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI2384621.node = NNI2384621;
NTI2384723.base = NTI2384617;
NTI2384728.base = NTI2384617;
var NNI2384617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI2384723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI2378015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI2378013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI2378013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI2384728, name: "up", sons: null}]};
NTI2384617.node = NNI2384617;
var NNI2384408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI2384408.node = NNI2384408;
NTI2384617.base = NTI2384408;
NTI2384621.base = NTI2384617;
NTI2384643.base = NTI2384621;
var NNI6795011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI6540232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI2378044, name: "b", sons: null}]};
NTI6795011.node = NNI6795011;
function toJSStr(s_2645096) {
                    var Tmp5;
            var Tmp7;

  var result_2645097 = null;

    var res_2645170 = newSeq_2645128((s_2645096).length);
    var i_2645172 = 0;
    var j_2645174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_2645172 < (s_2645096).length)) break L2;
          var c_2645175 = s_2645096[i_2645172];
          if ((c_2645175 < 128)) {
          res_2645170[j_2645174] = String.fromCharCode(c_2645175);
          i_2645172 += 1;
          }
          else {
            var helper_2645198 = newSeq_2645128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_2645199 = c_2645175.toString(16);
                  if (((code_2645199).length == 1)) {
                  helper_2645198.push("%0");;
                  }
                  else {
                  helper_2645198.push("%");;
                  }
                  
                  helper_2645198.push(code_2645199);;
                  i_2645172 += 1;
                    if (((s_2645096).length <= i_2645172)) Tmp5 = true; else {                      Tmp5 = (s_2645096[i_2645172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_2645175 = s_2645096[i_2645172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_2645170[j_2645174] = decodeURIComponent(helper_2645198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_2645170[j_2645174] = helper_2645198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_2645174 += 1;
        }
    } while(false);
    if (res_2645170.length < j_2645174) { for (var i=res_2645170.length;i<j_2645174;++i) res_2645170.push(null); }
               else { res_2645170.length = j_2645174; };
    result_2645097 = res_2645170.join("");

  return result_2645097;

}
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
function makeNimstrLit(c_2645062) {
      var ln = c_2645062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_2645062.charCodeAt(i);
  }
  return result;
  

  
}
          var TO_TEST_11702019 = [makeNimstrLit("0123456"), makeNimstrLit("1234567"), makeNimstrLit("abcdefg"), makeNimstrLit("ABCDEFG"), makeNimstrLit("test"), makeNimstrLit("Lorem ipsum dolor sit amet consectetur adipisicing elit. Ducimus quidem harum numquam hic suscipit iusto voluptate debitis dolores qui, doloribus dolorum rem eligendi, amet at molestiae totam repellendus animi officia?"), makeNimstrLit("\xC3\xB0\xC3\xB0\xC3\x9F\xE2\x80\x9D\xC3\xB0\xC3\xB0\xC3\xB0\xE2\x80\x9D\xC3\x9F\xE2\x80\x9D\xE2\x86\x90\xC2\xAC\xE2\x80\x9D\xE2\x86\x93\xE2\x86\x92\xE2\x86\x90"), [], makeNimstrLit("stgyhneu")];
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr([48, 57]);
var ConstSet2 = setConstr([48, 57]);
function raiseException(e_2610218, ename_2610219) {
    e_2610218.name = ename_2610219;
    if ((excHandler == 0)) {
    unhandledException(e_2610218);
    }
    
    throw e_2610218;

  
}
function mnewString(len_2650044) {
        return new Array(len_2650044);
  

  
}
var ConstSet3 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_2660023, src_2660024, ti_2660025) {
  var result_2665219 = null;

    switch (ti_2660025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_2655401(ti_2660025))) {
      result_2665219 = src_2660024;
      }
      else {
        result_2665219 = [src_2660024[0], src_2660024[1]];
      }
      
      break;
    case 19:
            if (dest_2660023 === null || dest_2660023 === undefined) {
        dest_2660023 = {};
      }
      else {
        for (var key in dest_2660023) { delete dest_2660023[key]; }
      }
      for (var key in src_2660024) { dest_2660023[key] = src_2660024[key]; }
      result_2665219 = dest_2660023;
    
      break;
    case 18:
    case 17:
      if (!((ti_2660025.base == null))) {
      result_2665219 = nimCopy(dest_2660023, src_2660024, ti_2660025.base);
      }
      else {
      if ((ti_2660025.kind == 17)) {
      result_2665219 = (dest_2660023 === null || dest_2660023 === undefined) ? {m_type: ti_2660025} : dest_2660023;
      }
      else {
        result_2665219 = (dest_2660023 === null || dest_2660023 === undefined) ? {} : dest_2660023;
      }
      }
      nimCopyAux(result_2665219, src_2660024, ti_2660025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_2660024 === null) {
        result_2665219 = null;
      }
      else {
        if (dest_2660023 === null || dest_2660023 === undefined) {
          dest_2660023 = new Array(src_2660024.length);
        }
        else {
          dest_2660023.length = src_2660024.length;
        }
        result_2665219 = dest_2660023;
        for (var i = 0; i < src_2660024.length; ++i) {
          result_2665219[i] = nimCopy(result_2665219[i], src_2660024[i], ti_2660025.base);
        }
      }
    
      break;
    case 28:
            if (src_2660024 !== null) {
        result_2665219 = src_2660024.slice(0);
      }
    
      break;
    default: 
      result_2665219 = src_2660024;
      break;
    }

  return result_2665219;

}
function nimCharToStr(x_2565674) {
  var result_2565675 = [];

    result_2565675 = nimCopy(null, mnewString(1), NTI2378013);
    result_2565675[0] = x_2565674;

  return result_2565675;

}
function cstrToNimstr(c_2645079) {
      var ln = c_2645079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_2645079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_2645079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
var ConstSet4 = setConstr(60, 62, 94);
var ConstSet5 = setConstr(60, 62, 94);
var ConstSet6 = setConstr(45, 43, 32);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([48, 57]);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr([65, 90], [97, 122]);
function nimBoolToStr(x_2565657) {
  var result_2565658 = [];

    if (x_2565657) {
    result_2565658 = nimCopy(null, makeNimstrLit("true"), NTI2378013);
    }
    else {
      result_2565658 = nimCopy(null, makeNimstrLit("false"), NTI2378013);
    }
    

  return result_2565658;

}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

console.log(__dirname)
// const mod = require("./genKey.js");

function newSeq_2645128(len_2645131) {
  var result_2645133 = [];

    result_2645133 = new Array(len_2645131); for (var i=0;i<len_2645131;++i) {result_2645133[i]=null;}
  return result_2645133;

}
function newSeq_11690028(len_11690031) {
  var result_11690033 = [];

    result_11690033 = new Array(len_11690031); for (var i=0;i<len_11690031;++i) {result_11690033[i]=0;}
  return result_11690033;

}
function add_2547211(x_2547214, x_2547214_Idx, y_2547215) {
          if (x_2547214[x_2547214_Idx] === null) { x_2547214[x_2547214_Idx] = []; }
      var off = x_2547214[x_2547214_Idx].length;
      x_2547214[x_2547214_Idx].length += y_2547215.length;
      for (var i = 0; i < y_2547215.length; ++i) {
        x_2547214[x_2547214_Idx][off+i] = y_2547215.charCodeAt(i);
      }
    

  
}
function unhandledException(e_2605059) {
    var buf_2605060 = [[]];
    if (!(((e_2605059.message).length == 0))) {
    buf_2605060[0].push.apply(buf_2605060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_2605060[0].push.apply(buf_2605060[0], e_2605059.message);;
    }
    else {
    buf_2605060[0].push.apply(buf_2605060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_2605060[0].push.apply(buf_2605060[0], makeNimstrLit(" ["));;
    add_2547211(buf_2605060, 0, e_2605059.name);
    buf_2605060[0].push.apply(buf_2605060[0], makeNimstrLit("]\x0A"));;
    var cbuf_2610201 = toJSStr(buf_2605060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_2610201);
  }
  else {
    throw cbuf_2610201;
  }
  

  
}
function integerOutOfRangeError_3350049() {
    raiseException({message: makeNimstrLit("Parsed integer outside of valid range"), parent: null, m_type: NTI2384643, name: null, trace: [], up: null}, "ValueError");

  
}
function rawParseInt_3355201(s_3355203, b_3355205, b_3355205_Idx, start_3355206) {
      var Tmp1;
          var Tmp4;
      var Tmp7;

  var result_3355208 = 0;

    var sign_3355209 = -1;
    var i_3355210 = start_3355206;
    if ((i_3355210 < (s_3355203).length)) {
    if ((s_3355203[i_3355210] == 43)) {
    i_3355210 += 1;
    }
    else {
    if ((s_3355203[i_3355210] == 45)) {
    i_3355210 += 1;
    sign_3355209 = 1;
    }
    }
    }
    
      if (!(i_3355210 < (s_3355203).length)) Tmp1 = false; else {        Tmp1 = (ConstSet1[s_3355203[i_3355210]] != undefined);      }    if (Tmp1) {
    b_3355205[b_3355205_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_3355210 < (s_3355203).length)) Tmp4 = false; else {            Tmp4 = (ConstSet2[s_3355203[i_3355210]] != undefined);          }        if (!Tmp4) break L3;
          var c_3365016 = (s_3355203[i_3355210] - 48);
          if ((Math.trunc((-9223372036854775808 + c_3365016) / 10) <= b_3355205[b_3355205_Idx])) {
          b_3355205[b_3355205_Idx] = ((b_3355205[b_3355205_Idx] * 10) - c_3365016);
          }
          else {
          integerOutOfRangeError_3350049();
          }
          
          i_3355210 += 1;
          L5: do {
              L6: while (true) {
              if (!((i_3355210 < (s_3355203).length) && (s_3355203[i_3355210] == 95))) break L6;
                i_3355210 += 1;
              }
          } while(false);
        }
    } while(false);
      if (!(sign_3355209 == -1)) Tmp7 = false; else {        Tmp7 = (b_3355205[b_3355205_Idx] == -9223372036854775808);      }    if (Tmp7) {
    integerOutOfRangeError_3350049();
    }
    else {
      b_3355205[b_3355205_Idx] = (b_3355205[b_3355205_Idx] * sign_3355209);
      result_3355208 = (i_3355210 - start_3355206);
    }
    
    }
    

  return result_3355208;

}
function npuParseBiggestInt(s_3370203, number_3370205, number_3370205_Idx, start_3370206) {
  var result_3370208 = 0;

    var res_3370209 = [0];
    result_3370208 = rawParseInt_3355201(s_3370203, res_3370209, 0, start_3370206);
    if (!((result_3370208 == 0))) {
    number_3370205[number_3370205_Idx] = res_3370209[0];
    }
    

  return result_3370208;

}
function npuParseInt(s_3375016, number_3375018, number_3375018_Idx, start_3375019) {
      var Tmp1;

  var result_3375021 = 0;

    var res_3375022 = [0];
    result_3375021 = npuParseBiggestInt(s_3375016, res_3375022, 0, start_3375019);
      if ((res_3375022[0] < -2147483648)) Tmp1 = true; else {        Tmp1 = (2147483647 < res_3375022[0]);      }    if (Tmp1) {
    integerOutOfRangeError_3350049();
    }
    
    if (!((result_3375021 == 0))) {
    number_3375018[number_3375018_Idx] = res_3375022[0];
    }
    

  return result_3375021;

}
function nsuParseInt(s_10900431) {
      var Tmp1;

  var result_10900432 = [0];

    result_10900432[0] = 0;
    var L_10900434 = npuParseInt(s_10900431, result_10900432, 0, 0);
      if (!((L_10900434 == (s_10900431).length))) Tmp1 = true; else {        Tmp1 = (L_10900434 == 0);      }    if (Tmp1) {
    raiseException({message: (makeNimstrLit("invalid integer: ") || []).concat(s_10900431 || []), parent: null, m_type: NTI2384643, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_10900432[0];

}
function isFatPointer_2655401(ti_2655403) {
  var result_2655404 = false;

  BeforeRet: do {
    result_2655404 = !((ConstSet3[ti_2655403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_2655404;

}
function nimCopyAux(dest_2660028, src_2660029, n_2660031) {
    switch (n_2660031.kind) {
    case 0:
      break;
    case 1:
            dest_2660028[n_2660031.offset] = nimCopy(dest_2660028[n_2660031.offset], src_2660029[n_2660031.offset], n_2660031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_2660031.sons.length; i++) {
      nimCopyAux(dest_2660028, src_2660029, n_2660031.sons[i]);
    }
    
      break;
    case 3:
            dest_2660028[n_2660031.offset] = nimCopy(dest_2660028[n_2660031.offset], src_2660029[n_2660031.offset], n_2660031.typ);
      for (var i = 0; i < n_2660031.sons.length; ++i) {
        nimCopyAux(dest_2660028, src_2660029, n_2660031.sons[i][1]);
      }
    
      break;
    }

  
}
function lshr_11685010(x_11685013, y_11685014) {
  var result_11685015 = 0;

  BeforeRet: do {
    result_11685015 = ((x_11685013 >>> 0) >>> y_11685014);
    break BeforeRet;
  } while (false);

  return result_11685015;

}
function lshl_11685034(x_11685037, y_11685038) {
  var result_11685039 = 0;

  BeforeRet: do {
    result_11685039 = (x_11685037 << y_11685038);
    break BeforeRet;
  } while (false);

  return result_11685039;

}
function tokenApplySecret_11682014(key_11682016, secret_11682017) {
  var result_11682018 = 0;

    var i_11682020 = 0;
    result_11682018 = key_11682016;
    L1: do {
      var __11682028 = 0;
      var colontmp__11710080 = 0;
      colontmp__11710080 = ((secret_11682017).length - 2);
      var i_11710081 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11710081 < colontmp__11710080)) break L3;
            __11682028 = i_11710081;
            var ch_11682029 = secret_11682017[(i_11682020 + 2)];
            var chInt_11682031 = ch_11682029;
            if ((97 <= chInt_11682031)) {
            chInt_11682031 -= 87;
            }
            else {
              chInt_11682031 = nsuParseInt(nimCharToStr(ch_11682029));
            }
            
            if ((secret_11682017[(i_11682020 + 1)] == 43)) {
            chInt_11682031 = lshr_11685010(result_11682018, chInt_11682031);
            }
            else {
              chInt_11682031 = lshl_11685034(result_11682018, chInt_11682031);
            }
            
            if ((secret_11682017[i_11682020] == 43)) {
            result_11682018 = (result_11682018 + chInt_11682031);
            }
            else {
              result_11682018 = (result_11682018 ^ chInt_11682031);
            }
            
            i_11682020 += 3;
            if (((secret_11682017).length <= i_11682020)) {
            break L1;
            }
            
            i_11710081 += 1;
          }
      } while(false);
    } while(false);

  return result_11682018;

}
function newApiToken_11690014(seed_11690016) {
                  var Tmp4;

  var result_11690017 = [];

  BeforeRet: do {
    var code_11690070 = newSeq_11690028(0);
    var i_11690072 = 0;
    L1: do {
      var __11690074 = 0;
      var i_11710067 = 0;
      var L_11710068 = (seed_11690016).length;
      L2: do {
          L3: while (true) {
          if (!(i_11710067 < L_11710068)) break L3;
            __11690074 = seed_11690016[i_11710067];
            var chCode_11690075 = ((seed_11690016[i_11690072])|0);
            if ((chCode_11690075 < 128)) {
            code_11690070.push(chCode_11690075);;
            }
            else {
              if ((chCode_11690075 < 2048)) {
              code_11690070.push(((chCode_11690075 >> 6) | 192));;
              }
              else {
                  if (!((55296 == (chCode_11690075 & 64512)) && ((i_11690072 + 1) < (seed_11690016).length))) Tmp4 = false; else {                    Tmp4 = (56320 == (((seed_11690016[(i_11690072 + 1)])|0) & 64512));                  }                if (Tmp4) {
                i_11690072 += 1;
                chCode_11690075 = ((65536 + ((chCode_11690075 & 1023) << 10)) + ((seed_11690016[i_11690072])|0));
                code_11690070.push(((chCode_11690075 >> 18) | 240));;
                code_11690070.push((((chCode_11690075 >> 12) & 63) | 128));;
                }
                else {
                code_11690070.push(((chCode_11690075 >> 12) | 224));;
                }
                
                code_11690070.push((((chCode_11690075 >> 6) & 63) | 128));;
              }
              
            }
            
            i_11690072 += 1;
            i_11710067 += 1;
          }
      } while(false);
    } while(false);
    var key_11690191 = 0;
    L5: do {
      var codeDigit_11700214 = null;
      var codeDigit_11700214_Idx = 0;
      var i_11710072 = 0;
      var L_11710073 = (code_11690070).length;
      L6: do {
          L7: while (true) {
          if (!(i_11710072 < L_11710073)) break L7;
            codeDigit_11700214 = code_11690070; codeDigit_11700214_Idx = i_11710072;
            key_11690191 += codeDigit_11700214[codeDigit_11700214_Idx];
            key_11690191 = tokenApplySecret_11682014(key_11690191, makeNimstrLit("+-a^+6"));
            i_11710072 += 1;
          }
      } while(false);
    } while(false);
    key_11690191 = tokenApplySecret_11682014(key_11690191, makeNimstrLit("+-3^+b+-f"));
    key_11690191 = (key_11690191 ^ 0);
    if ((key_11690191 < 0)) {
    key_11690191 = ((key_11690191 & 2147483647) + 2147483648);
    }
    
    key_11690191 = Math.trunc(key_11690191 % 1000000);
    result_11690017 = nimCopy(null, (cstrToNimstr((key_11690191)+"") || []).concat(makeNimstrLit(".") || [],cstrToNimstr((key_11690191)+"") || []), NTI2378013);
    break BeforeRet;
  } while (false);

  return result_11690017;

}
function parseSaturatedNatural_3385017(s_3385019, b_3385021, b_3385021_Idx, start_3385022) {
      var Tmp1;
          var Tmp4;

  var result_3385024 = 0;

    var i_3385025 = start_3385022;
    if (((i_3385025 < (s_3385019).length) && (s_3385019[i_3385025] == 43))) {
    i_3385025 += 1;
    }
    
      if (!(i_3385025 < (s_3385019).length)) Tmp1 = false; else {        Tmp1 = (ConstSet8[s_3385019[i_3385025]] != undefined);      }    if (Tmp1) {
    b_3385021[b_3385021_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_3385025 < (s_3385019).length)) Tmp4 = false; else {            Tmp4 = (ConstSet9[s_3385019[i_3385025]] != undefined);          }        if (!Tmp4) break L3;
          var c_3395016 = (s_3385019[i_3385025] - 48);
          if ((b_3385021[b_3385021_Idx] <= Math.trunc((2147483647 - c_3395016) / 10))) {
          b_3385021[b_3385021_Idx] = ((b_3385021[b_3385021_Idx] * 10) + c_3395016);
          }
          else {
            b_3385021[b_3385021_Idx] = 2147483647;
          }
          
          i_3385025 += 1;
          L5: do {
              L6: while (true) {
              if (!((i_3385025 < (s_3385019).length) && (s_3385019[i_3385025] == 95))) break L6;
                i_3385025 += 1;
              }
          } while(false);
        }
    } while(false);
    result_3385024 = (i_3385025 - start_3385022);
    }
    

  return result_3385024;

}
function HEX5BHEX5D_6795068(s_6795072, x_6795074) {
  var result_6795075 = [];

    var a_6795201 = x_6795074.a;
    var L_6795401 = ((((s_6795072).length - x_6795074.b) - a_6795201) + 1);
    result_6795075 = nimCopy(null, mnewString(L_6795401), NTI2378013);
    L1: do {
      var i_6795409 = 0;
      var i_11710110 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11710110 < L_6795401)) break L3;
            i_6795409 = i_11710110;
            result_6795075[i_6795409] = s_6795072[(i_6795409 + a_6795201)];
            i_11710110 += 1;
          }
      } while(false);
    } while(false);

  return result_6795075;

}
function HEX2EHEX2E_6795001(a_6795006, b_6795008) {
  var result_6795014 = ({a: 0, b: 0});

    nimCopy(result_6795014, {a: a_6795006, b: b_6795008}, NTI6795011);

  return result_6795014;

}
function parseStandardFormatSpecifier_11565322(s_11565324, start_11565325, ignoreUnknownSuffix_11565327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_11565328 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_11565328.fill = 32;
    result_11565328.align = 0;
    result_11565328.sign = 45;
    var i_11565331 = start_11565325;
    if ((((i_11565331 + 1) < (s_11565324).length) && (ConstSet4[s_11565324[(i_11565331 + 1)]] != undefined))) {
    result_11565328.fill = s_11565324[i_11565331];
    result_11565328.align = s_11565324[(i_11565331 + 1)];
    i_11565331 += 2;
    }
    else {
    if (((i_11565331 < (s_11565324).length) && (ConstSet5[s_11565324[i_11565331]] != undefined))) {
    result_11565328.align = s_11565324[i_11565331];
    i_11565331 += 1;
    }
    }
    if (((i_11565331 < (s_11565324).length) && (ConstSet6[s_11565324[i_11565331]] != undefined))) {
    result_11565328.sign = s_11565324[i_11565331];
    i_11565331 += 1;
    }
    
    if (((i_11565331 < (s_11565324).length) && (s_11565324[i_11565331] == 35))) {
    result_11565328.alternateForm = true;
    i_11565331 += 1;
    }
    
      if (!(((i_11565331 + 1) < (s_11565324).length) && (s_11565324[i_11565331] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet7[s_11565324[(i_11565331 + 1)]] != undefined);      }    if (Tmp1) {
    result_11565328.padWithZero = true;
    i_11565331 += 1;
    }
    
    var parsedLength_11585015 = parseSaturatedNatural_3385017(s_11565324, result_11565328, "minimumWidth", i_11565331);
    i_11565331 += parsedLength_11585015;
    if (((i_11565331 < (s_11565324).length) && (s_11565324[i_11565331] == 46))) {
    i_11565331 += 1;
    var parsedLengthB_11585029 = parseSaturatedNatural_3385017(s_11565324, result_11565328, "precision", i_11565331);
    i_11565331 += parsedLengthB_11585029;
    }
    else {
      result_11565328.precision = -1;
    }
    
      if (!(i_11565331 < (s_11565324).length)) Tmp2 = false; else {        Tmp2 = (ConstSet10[s_11565324[i_11565331]] != undefined);      }    if (Tmp2) {
    result_11565328.typ = s_11565324[i_11565331];
    i_11565331 += 1;
    }
    
    result_11565328.endPosition = i_11565331;
      if (!!((i_11565331 == (s_11565324).length))) Tmp3 = false; else {        Tmp3 = !(ignoreUnknownSuffix_11565327);      }    if (Tmp3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_6795068(s_11565324, HEX2EHEX2E_6795001(i_11565331, 1)) || []), parent: null, m_type: NTI2384643, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_11565328;

}
function nucruneLen(s_3467025) {
  var result_3467026 = 0;

    result_3467026 = 0;
    var i_3467028 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_3467028 < (s_3467025).length)) break L2;
          if ((s_3467025[i_3467028] <= 127)) {
          i_3467028 += 1;
          }
          else {
          if ((((s_3467025[i_3467028] >>> 0) >>> 5) == 6)) {
          i_3467028 += 2;
          }
          else {
          if ((((s_3467025[i_3467028] >>> 0) >>> 4) == 14)) {
          i_3467028 += 3;
          }
          else {
          if ((((s_3467025[i_3467028] >>> 0) >>> 3) == 30)) {
          i_3467028 += 4;
          }
          else {
          if ((((s_3467025[i_3467028] >>> 0) >>> 2) == 62)) {
          i_3467028 += 5;
          }
          else {
          if ((((s_3467025[i_3467028] >>> 0) >>> 1) == 126)) {
          i_3467028 += 6;
          }
          else {
          i_3467028 += 1;
          }
          }}}}}
          result_3467026 += 1;
        }
    } while(false);

  return result_3467026;

}
function runeLenAt_3467128(s_3467130, i_3467131) {
  var result_3467132 = 0;

    if ((s_3467130[i_3467131] <= 127)) {
    result_3467132 = 1;
    }
    else {
    if ((((s_3467130[i_3467131] >>> 0) >>> 5) == 6)) {
    result_3467132 = 2;
    }
    else {
    if ((((s_3467130[i_3467131] >>> 0) >>> 4) == 14)) {
    result_3467132 = 3;
    }
    else {
    if ((((s_3467130[i_3467131] >>> 0) >>> 3) == 30)) {
    result_3467132 = 4;
    }
    else {
    if ((((s_3467130[i_3467131] >>> 0) >>> 2) == 62)) {
    result_3467132 = 5;
    }
    else {
    if ((((s_3467130[i_3467131] >>> 0) >>> 1) == 126)) {
    result_3467132 = 6;
    }
    else {
      result_3467132 = 1;
    }
    }}}}}

  return result_3467132;

}
function runeOffset_4090259(s_4090261, pos_4090262, start_4090263) {
  var result_4090264 = 0;

  BeforeRet: do {
    var i_4090266 = 0;
    var o_4090267 = start_4090263;
    L1: do {
        L2: while (true) {
        if (!(i_4090266 < pos_4090262)) break L2;
          o_4090267 += runeLenAt_3467128(s_4090261, o_4090267);
          if (((s_4090261).length <= o_4090267)) {
          result_4090264 = -1;
          break BeforeRet;
          }
          
          i_4090266 += 1;
        }
    } while(false);
    result_4090264 = o_4090267;
    break BeforeRet;
  } while (false);

  return result_4090264;

}
function validateUtf8_3710244(s_3710246) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_3710247 = 0;

  BeforeRet: do {
    var i_3710249 = 0;
    var L_3710250 = (s_3710246).length;
    L1: do {
        L2: while (true) {
        if (!(i_3710249 < L_3710250)) break L2;
          if ((s_3710246[i_3710249] <= 127)) {
          i_3710249 += 1;
          }
          else {
          if ((((s_3710246[i_3710249] >>> 0) >>> 5) == 6)) {
          if ((s_3710246[i_3710249] < 194)) {
          result_3710247 = i_3710249;
          break BeforeRet;
          }
          
            if (!((i_3710249 + 1) < L_3710250)) Tmp3 = false; else {              Tmp3 = (((s_3710246[(i_3710249 + 1)] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          i_3710249 += 2;
          }
          else {
            result_3710247 = i_3710249;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_3710246[i_3710249] >>> 0) >>> 4) == 14)) {
            if (!((i_3710249 + 2) < L_3710250)) Tmp5 = false; else {              Tmp5 = (((s_3710246[(i_3710249 + 1)] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_3710246[(i_3710249 + 2)] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          i_3710249 += 3;
          }
          else {
            result_3710247 = i_3710249;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_3710246[i_3710249] >>> 0) >>> 3) == 30)) {
            if (!((i_3710249 + 3) < L_3710250)) Tmp8 = false; else {              Tmp8 = (((s_3710246[(i_3710249 + 1)] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_3710246[(i_3710249 + 2)] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_3710246[(i_3710249 + 3)] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          i_3710249 += 4;
          }
          else {
            result_3710247 = i_3710249;
            break BeforeRet;
          }
          
          }
          else {
            result_3710247 = i_3710249;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    result_3710247 = -1;
    break BeforeRet;
  } while (false);

  return result_3710247;

}
function nsuRepeatChar(c_11080124, count_11080125) {
  var result_11080126 = [];

    result_11080126 = nimCopy(null, mnewString(count_11080125), NTI2378013);
    L1: do {
      var i_11080135 = 0;
      var colontmp__11710141 = 0;
      colontmp__11710141 = (count_11080125 - 1);
      var res_11710142 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_11710142 <= colontmp__11710141)) break L3;
            i_11080135 = res_11710142;
            result_11080126[i_11080135] = c_11080124;
            res_11710142 += 1;
          }
      } while(false);
    } while(false);

  return result_11080126;

}
function alignString_11565222(s_11565224, minimumWidth_11565225, align_11565226, fill_11565227) {
      var Tmp1;

  var result_11565228 = [];

    if ((minimumWidth_11565225 == 0)) {
    result_11565228 = nimCopy(null, s_11565224, NTI2378013);
    }
    else {
      if ((validateUtf8_3710244(s_11565224) == -1)) {
      Tmp1 = nucruneLen(s_11565224);
      }
      else {
      Tmp1 = (s_11565224).length;
      }
      
      var sRuneLen_11565229 = Tmp1;
      var toFill_11565230 = (minimumWidth_11565225 - sRuneLen_11565229);
      if ((toFill_11565230 <= 0)) {
      result_11565228 = nimCopy(null, s_11565224, NTI2378013);
      }
      else {
      if (((align_11565226 == 60) || (align_11565226 == 0))) {
      result_11565228 = nimCopy(null, (s_11565224 || []).concat(nsuRepeatChar(fill_11565227, toFill_11565230) || []), NTI2378013);
      }
      else {
      if ((align_11565226 == 94)) {
      var half_11565231 = Math.trunc(toFill_11565230 / 2);
      result_11565228 = nimCopy(null, (nsuRepeatChar(fill_11565227, half_11565231) || []).concat(s_11565224 || [],nsuRepeatChar(fill_11565227, (toFill_11565230 - half_11565231)) || []), NTI2378013);
      }
      else {
        result_11565228 = nimCopy(null, (nsuRepeatChar(fill_11565227, toFill_11565230) || []).concat(s_11565224 || []), NTI2378013);
      }
      }}
    }
    

  return result_11565228;

}
function formatValue_11610080(result_11610083, result_11610083_Idx, value_11610084, specifier_11610085) {
    var spec_11610086 = parseStandardFormatSpecifier_11565322(specifier_11610085, 0, false);
    var value_11610087 = nimCopy(null, value_11610084, NTI2378013);
    switch (spec_11610086.typ) {
    case 115:
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_11610086.typ]), parent: null, m_type: NTI2384643, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_11610086.precision == -1))) {
    if ((spec_11610086.precision < nucruneLen(value_11610087))) {
    (value_11610087.length = runeOffset_4090259(value_11610087, spec_11610086.precision, 0));
    }
    
    }
    
    result_11610083[result_11610083_Idx].push.apply(result_11610083[result_11610083_Idx], alignString_11565222(value_11610087, spec_11610086.minimumWidth, spec_11610086.align, spec_11610086.fill));;

  
}
function formatValue_11710003(result_11710006, result_11710006_Idx, value_11710007, specifier_11710008) {
    formatValue_11610080(result_11710006, result_11710006_Idx, nimBoolToStr(value_11710007), specifier_11710008);

  
}
          var Tmp5;
rawEcho(makeNimstrLit("\x0ATests"));
L1: do {
  L2: do {
    var str_11702069 = [[]];
    var i_11710059 = 0;
    if ((i_11710059 <= 8)) {
    L3: do {
        L4: while (true) {
        if (!true) break L4;
          str_11702069[0] = TO_TEST_11702019[i_11710059];
          var nim_11702070 = newApiToken_11690014(str_11702069[0]);
          var js_11702071 = mod.newKey(toJSStr(str_11702069[0]));
          if ((toJSStr(nim_11702070) == js_11702071)) {
          Tmp5 = makeNimstrLit("\x1B[32m");
          }
          else {
          Tmp5 = makeNimstrLit("\x1B[31m");
          }
          
          var color_11702073 = nimCopy(null, Tmp5, NTI2378013);
          var fmtRes_11702081 = [mnewString(0)];
          formatValue_11610080(fmtRes_11702081, 0, nim_11702070, []);
          fmtRes_11702081[0].push.apply(fmtRes_11702081[0], makeNimstrLit(" == "));;
          add_2547211(fmtRes_11702081, 0, js_11702071);
          fmtRes_11702081[0].push.apply(fmtRes_11702081[0], makeNimstrLit(" "));;
          formatValue_11710003(fmtRes_11702081, 0, (toJSStr(nim_11702070) == js_11702071), []);
          rawEcho(color_11702073, fmtRes_11702081[0]);
          if ((8 <= i_11710059)) {
          break L3;
          }
          
          i_11710059 += 1;
        }
    } while(false);
    }
    
  } while(false);
} while(false);
